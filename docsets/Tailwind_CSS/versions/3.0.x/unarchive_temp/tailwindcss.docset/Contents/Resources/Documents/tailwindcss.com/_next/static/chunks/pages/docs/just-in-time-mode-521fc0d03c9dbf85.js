(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[638],{21370:function(a,b){"use strict";b.Z="/_next/static/media/social-square.b622e290e82093c36cca57092ffe494f.jpg"},64713:function(a,b,c){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/just-in-time-mode",function(){return c(18178)}])},18178:function(a,b,c){"use strict";Object.defineProperty(b,"__esModule",{value:!0}),b.default=n,k(c(67294));var d=c(3905),e=k(c(41664)),f=c(59533),g=c(5679),h=c(53339),i=c(50156),j=c(55390);function k(a){return a&&a.__esModule?a:{default:a}}c(17204);var l={Layout:h.DocumentationLayout,meta:{title:"Just-in-Time Mode",shortTitle:"Just-in-Time Mode",description:"A faster, more powerful, on-demand engine for Tailwind CSS v2.1+."},slug:"just-in-time-mode",tableOfContents:[{title:"Overview",slug:"overview",children:[]},{title:"Enabling JIT mode",slug:"enabling-jit-mode",children:[]},{title:"New features",slug:"new-features",children:[{title:"All variants are enabled",slug:"all-variants-are-enabled",children:[]},{title:"Stackable variants",slug:"stackable-variants",children:[]},{title:"Arbitrary value support",slug:"arbitrary-value-support",children:[{title:"Dynamic values",slug:"dynamic-values"},{title:"Values with spaces",slug:"values-with-spaces"},{title:"Ambiguous values",slug:"ambiguous-values"}]},{title:"Built-in important modifier",slug:"built-in-important-modifier",children:[]},{title:"Color opacity shorthand",slug:"color-opacity-shorthand",children:[]},{title:"Per-side border colors",slug:"per-side-border-colors",children:[]},{title:"Pseudo-element variants",slug:"pseudo-element-variants",children:[]},{title:"Content utilities",slug:"content-utilities",children:[]},{title:"Exhaustive pseudo-class support",slug:"exhaustive-pseudo-class-support",children:[]},{title:"Caret color utilities",slug:"caret-color-utilities",children:[]},{title:"Sibling selector variants",slug:"sibling-selector-variants",children:[]},{title:"Simplified transform, filter, and backdrop-filter composition",slug:"simplified-transform-filter-and-backdrop-filter-composition",children:[]}]},{title:"Changes",slug:"changes",children:[{title:"Variants are rendered together",slug:"variants-are-rendered-together",children:[]},{title:"Variants are inserted at @tailwind variants",slug:"variants-are-inserted-at-tailwind-variants",children:[]},{title:"Transforms and filters don't need to be explicitly enabled",slug:"transforms-and-filters-don-t-need-to-be-explicitly-enabled",children:[]}]},{title:"Limitations",slug:"limitations",children:[]},{title:"Troubleshooting",slug:"troubleshooting",children:[{title:"Styles aren't removed when classes are deleted",slug:"styles-aren-t-removed-when-classes-are-deleted",children:[]},{title:"Styles don't update when saving content files",slug:"styles-don-t-update-when-saving-content-files",children:[]},{title:"Styles rebuild in an infinite loop",slug:"styles-rebuild-in-an-infinite-loop",children:[]},{title:"It just doesn't seem to work properly",slug:"it-just-doesn-t-seem-to-work-properly",children:[]}]}]},m=i.ContentsLayout;function n(a){var b=a.components,c=function(a,b){if(null==a)return{};var c,d,e=function(a,b){if(null==a)return{};var c,d,e={},f=Object.keys(a);for(d=0;d<f.length;d++)c=f[d],b.indexOf(c)>=0||(e[c]=a[c]);return e}(a,b);if(Object.getOwnPropertySymbols){var f=Object.getOwnPropertySymbols(a);for(d=0;d<f.length;d++)c=f[d],!(b.indexOf(c)>=0)&&Object.prototype.propertyIsEnumerable.call(a,c)&&(e[c]=a[c])}return e}(a,["components"]);return d.mdx(m,Object.assign({},l,c,{components:b,mdxType:"MDXLayout"}),d.mdx(g.Heading,{level:2,id:"overview",nextElement:{type:"jsx"},hidden:!0,mdxType:"Heading"},"Overview"),d.mdx(j.TipInfo,{mdxType:"TipInfo"},d.mdx("strong",{className:"font-semibold text-blue-900"},"This feature is currently in preview.")," Preview features are not covered by semantic versioning and some details may change as we continue to refine them."),d.mdx("p",null,"Tailwind CSS v2.1 introduces a new just-in-time compiler for Tailwind CSS that generates your styles on-demand as you author your templates instead of generating everything in advance at initial build time."),d.mdx("div",{className:"relative pb-[calc(9/16*100%)] my-12"},d.mdx("iframe",{className:"absolute inset-0 h-full w-full",src:"https://www.youtube.com/embed/3O_3X7InOw8",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0})),d.mdx("p",null,"This comes with a lot of advantages:"),d.mdx("ul",Object.assign({},{role:"list"}),d.mdx("li",{parentName:"ul"},d.mdx("strong",{parentName:"li"},"Lightning fast build times"),". Tailwind can take 3–8s to initially compile using our CLI, and upwards of 30–45s in webpack projects because webpack struggles with large CSS files. This library can compile even the biggest projects in about 800ms ",d.mdx("em",{parentName:"li"},"(with incremental rebuilds as fast as 3ms)"),", no matter what build tool you’re using."),d.mdx("li",{parentName:"ul"},d.mdx("strong",{parentName:"li"},"Every variant is enabled out of the box"),". Variants like ",d.mdx("inlineCode",{parentName:"li"},"focus-visible"),", ",d.mdx("inlineCode",{parentName:"li"},"active"),", ",d.mdx("inlineCode",{parentName:"li"},"disabled"),", and others are not normally enabled by default due to file-size considerations. Since this library generates styles on demand, you can use any variant you want, whenever you want. You can even stack them like ",d.mdx("inlineCode",{parentName:"li"},"sm:hover:active:disabled:opacity-75"),". Never configure your variants again."),d.mdx("li",{parentName:"ul"},d.mdx("strong",{parentName:"li"},"Generate arbitrary styles without writing custom CSS.")," Ever needed some ultra-specific value that wasn’t part of your design system, like ",d.mdx("inlineCode",{parentName:"li"},"top: -113px")," for a quirky background image? Since styles are generated on demand, you can just generate a utility for this as needed using square bracket notation like ",d.mdx("inlineCode",{parentName:"li"},"top-[-113px]"),". Works with variants too, like ",d.mdx("inlineCode",{parentName:"li"},"md:top-[-113px]"),"."),d.mdx("li",{parentName:"ul"},d.mdx("strong",{parentName:"li"},"Your CSS is identical in development and production"),". Since styles are generated as they are needed, you don’t need to purge unused styles for production, which means you see the exact same CSS in all environments. Never worry about accidentally purging an important style in production again."),d.mdx("li",{parentName:"ul"},d.mdx("strong",{parentName:"li"},"Better browser performance in development"),". Since development builds are as small as production builds, the browser doesn’t have to parse and manage multiple megabytes of pre-generated CSS. In projects with heavily extended configurations this makes dev tools a lot more responsive.")),d.mdx("p",null,"To see it in action, ",d.mdx("a",Object.assign({parentName:"p"},{href:"https://www.youtube.com/watch?v=3O_3X7InOw8"}),"watch our announcement video"),"."),d.mdx("hr",null),d.mdx(g.Heading,{level:2,id:"enabling-jit-mode",nextElement:{type:"paragraph"}},"Enabling JIT mode"),d.mdx("p",null,"To enable just-in-time mode, set the ",d.mdx("inlineCode",{parentName:"p"},"mode")," option to ",d.mdx("inlineCode",{parentName:"p"},"'jit'")," in your ",d.mdx("inlineCode",{parentName:"p"},"tailwind.config.js")," file:"),d.mdx(f.Editor,{filename:"tailwind.config.js"},d.mdx("pre",Object.assign({},{className:"language-diff-js"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-diff-js"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"module"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"."),d.mdx("span",Object.assign({parentName:"span"},{className:"token property-access"}),"exports"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"{"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js inserted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  mode"),d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),":"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"'jit'"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),","),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  purge"),d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),":"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"["),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"    "),d.mdx("span",Object.assign({parentName:"span"},{className:"token comment"}),"// ..."),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"]"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),","),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  theme"),d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),":"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"{"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"    "),d.mdx("span",Object.assign({parentName:"span"},{className:"token comment"}),"// ..."),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"}"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  "),d.mdx("span",Object.assign({parentName:"span"},{className:"token comment"}),"// ..."),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"}"))))),d.mdx("p",null,"Since JIT mode generates your CSS on-demand by scanning your template files, it’s crucial that you configure the ",d.mdx("inlineCode",{parentName:"p"},"purge")," option in your ",d.mdx("inlineCode",{parentName:"p"},"tailwind.config.js")," file with all of your template paths, otherwise your CSS will be empty:"),d.mdx(f.Editor,{filename:"tailwind.config.js"},d.mdx("pre",Object.assign({},{className:"language-diff-js"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-diff-js"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"module"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"."),d.mdx("span",Object.assign({parentName:"span"},{className:"token property-access"}),"exports"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"{"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  mode"),d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),":"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"'jit'"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),","),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js inserted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  "),d.mdx("span",Object.assign({parentName:"span"},{className:"token comment"}),"// These paths are just examples, customize them to match your project structure"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js inserted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  purge"),d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),":"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"["),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js inserted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"    "),d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"'./public/**/*.html'"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),","),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js inserted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"    "),d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"'./src/**/*.{js,jsx,ts,tsx,vue}'"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),","),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js inserted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"]"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),","),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  theme"),d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),":"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"{"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"    "),d.mdx("span",Object.assign({parentName:"span"},{className:"token comment"}),"// ..."),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"}"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  "),d.mdx("span",Object.assign({parentName:"span"},{className:"token comment"}),"// ..."),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"}"))))),d.mdx("p",null,"Now when you start your development server or build runner, Tailwind will generate your styles on-demand instead of generating everything in advance."),d.mdx("p",null,"Having issues? See the ",d.mdx("a",Object.assign({parentName:"p"},{href:"#troubleshooting"}),"troubleshooting section")," to learn how to fix common problems."),d.mdx("hr",null),d.mdx(g.Heading,{level:2,id:"new-features",nextElement:{type:"heading",depth:3}},"New features"),d.mdx(g.Heading,{level:3,id:"all-variants-are-enabled",nextElement:{type:"paragraph"}},"All variants are enabled"),d.mdx("p",null,"Since styles are generated on-demand, there’s no need to configure which variants are available for each core plugin."),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"input")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"disabled:opacity-75",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"You can use variants like ",d.mdx("inlineCode",{parentName:"p"},"focus-visible"),", ",d.mdx("inlineCode",{parentName:"p"},"active"),", ",d.mdx("inlineCode",{parentName:"p"},"disabled"),", ",d.mdx("inlineCode",{parentName:"p"},"even"),", and more in combination with any utility, without making any changes to your ",d.mdx("inlineCode",{parentName:"p"},"tailwind.config.js")," file."),d.mdx(g.Heading,{level:3,id:"stackable-variants",nextElement:{type:"paragraph"}},"Stackable variants"),d.mdx("p",null,"All variants can be combined together to easily target very specific situations without writing custom CSS."),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"button")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"md:dark:disabled:focus:hover:bg-gray-400",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx(g.Heading,{level:3,id:"arbitrary-value-support",nextElement:{type:"paragraph"}},"Arbitrary value support"),d.mdx("p",null,"Many utilities support arbitrary values using a new square bracket notation to indicate that you’re “breaking out” of your design system."),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"<!-- Sizes and positioning -->"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"img")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"absolute w-[762px] h-[918px] top-[-325px] right-[62px] md:top-[-400px] md:right-[80px]",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""))," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"src"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"/crazy-background-image.png",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"<!-- Colors -->"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"button")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"bg-[#1da1f1]",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"Share on Twitter",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"button"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"<!-- Complex grids -->"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"grid-cols-[1fr,700px,2fr]",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"<!-- ... -->"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"This is very useful for building pixel-perfect designs where there are a few elements that need hyper-specific styles, like a carefully positioned background image on a marketing site."),d.mdx("p",null,"We’ll likely add some form of “strict mode” in the future for power-hungry team leads who don’t trust their colleagues to use this feature responsibly."),d.mdx(g.Heading,{level:4,id:"dynamic-values",nextElement:{type:"paragraph"}},"Dynamic values"),d.mdx("p",null,"Note that you still need to ",d.mdx("a",Object.assign({parentName:"p"},{href:"https://tailwindcss.com/docs/optimizing-for-production#writing-purgeable-html"}),"write purgeable HTML")," when using arbitrary values, and your classes need to exist as complete strings for Tailwind to detect them correctly."),d.mdx(j.TipBad,{mdxType:"TipBad"},"Don't use string concatenation to create class names"),d.mdx("pre",Object.assign({},{className:"language-jsx"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"className"),d.mdx("span",Object.assign({parentName:"span"},{className:"token script language-javascript"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token script-punctuation punctuation"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"{"),d.mdx("span",Object.assign({parentName:"span"},{className:"token template-string"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token template-punctuation string"}),"`"),d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"mt-["),d.mdx("span",Object.assign({parentName:"span"},{className:"token interpolation"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token interpolation-punctuation punctuation"}),"${"),"size ",d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),"===")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"'lg'")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),"?")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"'22px'")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"'17px'")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token interpolation-punctuation punctuation"}),"}")),d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"]"),d.mdx("span",Object.assign({parentName:"span"},{className:"token template-punctuation string"}),"`")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"}")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx(j.TipGood,{mdxType:"TipGood"},"Do dynamically select a complete class name"),d.mdx("pre",Object.assign({},{className:"language-jsx"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"className"),d.mdx("span",Object.assign({parentName:"span"},{className:"token script language-javascript"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token script-punctuation punctuation"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"{")," size ",d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),"===")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"'lg'")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),"?")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"'mt-[22px]'")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"'mt-[17px]'")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"}")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"Tailwind doesn’t include any sort of client-side runtime, so class names need to be statically extractable at build-time, and can’t depend on any sort of arbitrary dynamic values that change on the client. Use inline styles for these situations, or combine Tailwind with a CSS-in-JS library like ",d.mdx("a",Object.assign({parentName:"p"},{href:"https://emotion.sh/docs/introduction"}),"Emotion")," if it makes sense for your project."),d.mdx(j.TipBad,{mdxType:"TipBad"},"Arbitrary values cannot be computed from dynamic values"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"bg-[{{ userThemeColor }}]",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx(j.TipGood,{mdxType:"TipGood"},"Use inline styles for truly dynamic or user-defined values"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token special-attr"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"style"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token value css language-css"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token selector"}),"background-color:")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"{"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"{")," userThemeColor ",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"}"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"}")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""))),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx(g.Heading,{level:4,id:"values-with-spaces",nextElement:{type:"paragraph"}},"Values with spaces"),d.mdx("p",null,"It’s also important to note that CSS classes cannot contain spaces, which means you can’t use arbitrary values like ",d.mdx("inlineCode",{parentName:"p"},"calc(100px - 4rem)")," or ",d.mdx("inlineCode",{parentName:"p"},"1fr 700px 2fr")," as-is. To use arbitrary values like this in your class names, you need to remove the spaces in things like ",d.mdx("inlineCode",{parentName:"p"},"calc")," calls, and replace the spaces with commas in lists like ",d.mdx("inlineCode",{parentName:"p"},"1fr 700px 2fr"),". Tailwind will automatically re-introduce the spaces for you in ",d.mdx("inlineCode",{parentName:"p"},"calc")," calls and replace the commas with spaces in lists when generating the corresponding CSS."),d.mdx(j.TipBad,{mdxType:"TipBad"},"Don't use spaces in arbitrary values"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"h-[calc(1000px - 4rem)]",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"...",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"grid-cols-[1fr 700px 2fr]",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"...",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx(j.TipGood,{mdxType:"TipGood"},"Remove spaces or replace with commas as appropriate"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"h-[calc(1000px-4rem)]",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"...",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"grid-cols-[1fr,700px,2fr]",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"...",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx(g.Heading,{level:4,id:"ambiguous-values",nextElement:{type:"paragraph"}},"Ambiguous values"),d.mdx("p",null,"If you are using a CSS variable as an arbitrary value, it can sometimes lead to class names that are ambiguous to the engine, for example:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"<!-- Is this a font size utility, or a text color utility? -->"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"text-[var(--mystery-var)]",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"In these situations, you can provide a hint to the engine by prefixing the arbitrary value with the type name:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"text-[",d.mdx("span",Object.assign({parentName:"span"},{className:"code-highlight bg-code-highlight"}),"color:"),"var(--mystery-var)]",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"The supported types are:"),d.mdx("ul",Object.assign({},{role:"list"}),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"length")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"color")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"angle")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"list"))),d.mdx(g.Heading,{level:3,id:"built-in-important-modifier",nextElement:{type:"paragraph"}},"Built-in important modifier"),d.mdx("p",null,"You can make any utility important by adding a ",d.mdx("inlineCode",{parentName:"p"},"!")," character to the beginning:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"p")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"font-bold !font-medium",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n  This will be medium even though bold comes later in the CSS.\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"p"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"The ",d.mdx("inlineCode",{parentName:"p"},"!")," always goes at the beginning of the utility name, after any variants, but before any prefix:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"sm:hover:!tw-font-bold",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"This can be useful in rare situations where you need to increase specificity because you’re at war with some styles you don’t control."),d.mdx(g.Heading,{level:3,id:"color-opacity-shorthand",nextElement:{type:"paragraph"}},"Color opacity shorthand"),d.mdx("p",null,"Instead of needing to use utilities like ",d.mdx("inlineCode",{parentName:"p"},"bg-opacity-50"),", ",d.mdx("inlineCode",{parentName:"p"},"text-opacity-25"),", or ",d.mdx("inlineCode",{parentName:"p"},"placeholder-opacity-40"),", the JIT engine lets you just tack the opacity right on to the end of the color:"),d.mdx("pre",Object.assign({},{className:"language-diff-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-diff-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-html deleted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),"<"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value"}),"bg-red-500 bg-opacity-25"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),">"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-html inserted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),"<"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value"}),"bg-red-500/25"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),">")))),d.mdx("p",null,"This means you can now change the opacity of colors anywhere in Tailwind, even where we previously didn’t have specific opacity utilities, like in gradients for example:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"bg-gradient-to-r from-red-500/50",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"The opacity values are taken from your ",d.mdx("inlineCode",{parentName:"p"},"opacity")," scale, but you can also use arbitrary opacity values using square bracket notation:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"bg-red-500/[0.31]",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx(g.Heading,{level:3,id:"per-side-border-colors",nextElement:{type:"paragraph"}},"Per-side border colors"),d.mdx("p",null,"Requested since like 2017 but left out due to file-size considerations, the JIT engine finally adds support for setting the border color for each side of an element independently:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"border-2 border-t-blue-500 border-r-pink-500 border-b-green-500 border-l-yellow-500",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"<!-- ... -->"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx(g.Heading,{level:3,id:"pseudo-element-variants",nextElement:{type:"paragraph"}},"Pseudo-element variants"),d.mdx("p",null,"The JIT engine adds support for styling pseudo-elements like ",d.mdx("inlineCode",{parentName:"p"},"::before"),", ",d.mdx("inlineCode",{parentName:"p"},"::after"),", ",d.mdx("inlineCode",{parentName:"p"},"::first-letter"),", ",d.mdx("inlineCode",{parentName:"p"},"::first-line"),", ",d.mdx("inlineCode",{parentName:"p"},"::marker"),", and ",d.mdx("inlineCode",{parentName:"p"},"::selection"),"."),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"before:block before:bg-blue-500 after:flex after:bg-pink-300",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"When you add any ",d.mdx("inlineCode",{parentName:"p"},"before")," or ",d.mdx("inlineCode",{parentName:"p"},"after")," variant, the ",d.mdx("inlineCode",{parentName:"p"},"content")," property is automatically set to ",d.mdx("inlineCode",{parentName:"p"},"\"\"")," to make sure the element is actually visible. To change the content property, use the new ",d.mdx("a",Object.assign({parentName:"p"},{href:"#content-utilities"}),"content utilities"),"."),d.mdx("p",null,"As mentioned, we’ve also added support for other pseudo-elements like ",d.mdx("inlineCode",{parentName:"p"},"::selection"),", which allows you to style selected text:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"p")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"selection:bg-yellow-300 ...",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n  I'm yellow when you highlight me.\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"p"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"Or the ",d.mdx("inlineCode",{parentName:"p"},"::marker")," pseudo-element, which allows you to style list markers:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"ul")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"marker:text-gray-500",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"li"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"Odio et sed.",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"li"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"li"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"Voluptatem perferendis optio est id.",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"li"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"li"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"Accusamus et aut odit.",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"li"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"ul"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx(g.Heading,{level:3,id:"content-utilities",nextElement:{type:"paragraph"}},"Content utilities"),d.mdx("p",null,"We’ve added new ",d.mdx("inlineCode",{parentName:"p"},"content-*")," utilities for setting the ",d.mdx("inlineCode",{parentName:"p"},"content")," property — super useful alongside the new ",d.mdx("inlineCode",{parentName:"p"},"before")," and ",d.mdx("inlineCode",{parentName:"p"},"after")," variants:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"before:content-[",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"'"),"hello",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"'"),"] before:block ...",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"They even support stuff like the ",d.mdx("inlineCode",{parentName:"p"},"attr "),"function, so you can reference a value stored in an attribute:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"data-content"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"hello world",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""))," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"before:content-[attr(data-content)] before:block ...",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx(g.Heading,{level:3,id:"exhaustive-pseudo-class-support",nextElement:{type:"paragraph"}},"Exhaustive pseudo-class support"),d.mdx("p",null,"On top of the existing stuff like ",d.mdx("inlineCode",{parentName:"p"},"hover"),", ",d.mdx("inlineCode",{parentName:"p"},"focus"),", and others, we’ve added support for every pseudo-class we thought made any sense at all, like ",d.mdx("inlineCode",{parentName:"p"},"required"),", ",d.mdx("inlineCode",{parentName:"p"},"invalid"),", ",d.mdx("inlineCode",{parentName:"p"},"placeholder-shown"),", and tons more."),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"input")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"invalid:border-red-500 ...",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"Here’s the complete list of new pseudo-class variants:"),d.mdx("ul",Object.assign({},{role:"list"}),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"only")," (for ",d.mdx("inlineCode",{parentName:"li"},"only-child"),")"),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"first-of-type")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"last-of-type")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"only-of-type")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"target")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"default")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"indeterminate")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"placeholder-shown")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"autofill")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"required")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"valid")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"invalid")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"in-range")),d.mdx("li",{parentName:"ul"},d.mdx("inlineCode",{parentName:"li"},"out-of-range"))),d.mdx(g.Heading,{level:3,id:"caret-color-utilities",nextElement:{type:"paragraph"}},"Caret color utilities"),d.mdx("p",null,"You can now set the color of the cursor in form fields using the new ",d.mdx("inlineCode",{parentName:"p"},"caret-{color}")," utilities:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"input")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"caret-red-500",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"These are customizable using the ",d.mdx("inlineCode",{parentName:"p"},"caretColor")," key in the ",d.mdx("inlineCode",{parentName:"p"},"theme")," section of your ",d.mdx("inlineCode",{parentName:"p"},"tailwind.config.js")," file."),d.mdx(g.Heading,{level:3,id:"sibling-selector-variants",nextElement:{type:"paragraph"}},"Sibling selector variants"),d.mdx("p",null,"Similar to the ",d.mdx("inlineCode",{parentName:"p"},"group-*")," variants we’ve supported for years for styling an element based on the parent state, you can use the new ",d.mdx("inlineCode",{parentName:"p"},"peer-*")," variants to style an element based on the state of one of its previous siblings:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"label"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"input")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"type"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"checkbox",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""))," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"peer sr-only",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"span")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"h-4 w-4 bg-gray-200 peer-checked:bg-blue-500",d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"<!-- ... -->"),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"span"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"<!-- ... -->"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"</"),"label"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"Simply mark the previous sibling you’re interested in with the ",d.mdx("inlineCode",{parentName:"p"},"peer")," class, then use variants like ",d.mdx("inlineCode",{parentName:"p"},"peer-hover"),", ",d.mdx("inlineCode",{parentName:"p"},"peer-checked"),", ",d.mdx("inlineCode",{parentName:"p"},"peer-focus"),", etc. to style your element based on the state of that sibling."),d.mdx(g.Heading,{level:3,id:"simplified-transform-filter-and-backdrop-filter-composition",nextElement:{type:"paragraph"}},"Simplified transform, filter, and backdrop-filter composition"),d.mdx("p",null,"The ",d.mdx("inlineCode",{parentName:"p"},"transform"),", ",d.mdx("inlineCode",{parentName:"p"},"filter"),", and ",d.mdx("inlineCode",{parentName:"p"},"backdrop-filter")," classes are no longer necessary to “enable” their respective set of composable utilities."),d.mdx("pre",Object.assign({},{className:"language-diff-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-diff-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-html deleted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),"<"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value"}),"transform scale-50 filter grayscale backdrop-filter backdrop-blur-sm"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),">"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-html inserted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),"<"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value"}),"scale-50 grayscale backdrop-blur-sm"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),">")))),d.mdx("p",null,"Now those features are automatically enabled any time you use any of the relevant sub-utilities."),d.mdx("hr",null),d.mdx(g.Heading,{level:2,id:"changes",nextElement:{type:"paragraph"}},"Changes"),d.mdx("p",null,"We see the JIT engine as a preview of what we plan to ship as Tailwind CSS v3.0, so there are a few small breaking changes to consider when opting in. We really don’t expect these to impact very many people but worth reading, especially if you notice any subtle differences in how your projects look."),d.mdx(g.Heading,{level:3,id:"variants-are-rendered-together",nextElement:{type:"paragraph"}},"Variants are rendered together"),d.mdx("p",null,"In the classic engine, utility variants are grouped together in the generated CSS per utility like this:"),d.mdx("pre",Object.assign({},{className:"language-css"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-css"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* Classic engine */"),"\n\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".bg-black"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token property"}),"background-color"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token hexcode color"}),"#000")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".hover"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\\"),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),":bg-black"),d.mdx("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":hover"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token property"}),"background-color"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token hexcode color"}),"#000")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".focus"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\\"),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),":bg-black"),d.mdx("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":focus"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token property"}),"background-color"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token hexcode color"}),"#000")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* ... */"),"\n\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".opacity-75"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token property"}),"opacity"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token number"}),"0.75")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".hover"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\\"),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),":opacity-75"),d.mdx("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":hover"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token property"}),"opacity"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token number"}),"0.75")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".focus"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\\"),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),":opacity-75"),d.mdx("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":focus"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token property"}),"opacity"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token number"}),"0.75")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* ... */"),"\n\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".translate-x-4"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token variable"}),"--tw-translate-x"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),d.mdx("span",Object.assign({parentName:"code"},{className:"token unit"}),"rem")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".hover"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\\"),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),":translate-x-4"),d.mdx("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":hover"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token variable"}),"--tw-translate-x"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),d.mdx("span",Object.assign({parentName:"code"},{className:"token unit"}),"rem")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".focus"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\\"),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),":translate-x-4"),d.mdx("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":focus"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token variable"}),"--tw-translate-x"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),d.mdx("span",Object.assign({parentName:"code"},{className:"token unit"}),"rem")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),d.mdx("p",null,"In the JIT engine, variants are grouped together ",d.mdx("em",{parentName:"p"},"per variant"),":"),d.mdx("pre",Object.assign({},{className:"language-css"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-css"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* JIT engine */"),"\n\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".bg-black"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token property"}),"background-color"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token hexcode color"}),"#000")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".opacity-75"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token property"}),"opacity"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token number"}),"0.75")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".translate-x-4"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token variable"}),"--tw-translate-x"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),d.mdx("span",Object.assign({parentName:"code"},{className:"token unit"}),"rem")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* ... */"),"\n\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".hover"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\\"),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),":bg-black"),d.mdx("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":hover"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token property"}),"background-color"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token hexcode color"}),"#000")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".hover"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\\"),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),":opacity-75"),d.mdx("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":hover"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token property"}),"opacity"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token number"}),"0.75")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".hover"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\\"),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),":translate-x-4"),d.mdx("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":hover"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token variable"}),"--tw-translate-x"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),d.mdx("span",Object.assign({parentName:"code"},{className:"token unit"}),"rem")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* ... */"),"\n\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".focus"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\\"),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),":bg-black"),d.mdx("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":focus"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token property"}),"background-color"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token hexcode color"}),"#000")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".focus"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\\"),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),":opacity-75"),d.mdx("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":focus"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token property"}),"opacity"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token number"}),"0.75")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token selector"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),".focus"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\\"),d.mdx("span",Object.assign({parentName:"span"},{className:"token class"}),":translate-x-4"),d.mdx("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":focus"))," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token variable"}),"--tw-translate-x"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),d.mdx("span",Object.assign({parentName:"code"},{className:"token unit"}),"rem")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),d.mdx("p",null,"This means that it’s not possible to specify the variant order per core plugin anymore — the variants will always be in the same order for all utilities. This could be a problem for you if previously you needed ",d.mdx("inlineCode",{parentName:"p"},"hover")," to defeat ",d.mdx("inlineCode",{parentName:"p"},"focus")," for a specific utility for example and had ensured ",d.mdx("inlineCode",{parentName:"p"},"hover")," came after ",d.mdx("inlineCode",{parentName:"p"},"focus")," in the variant list."),d.mdx(f.Editor,{filename:"tailwind.config.js"},d.mdx("pre",Object.assign({},{className:"language-diff-js"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-diff-js"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"module"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"."),d.mdx("span",Object.assign({parentName:"span"},{className:"token property-access"}),"exports"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"{"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  "),d.mdx("span",Object.assign({parentName:"span"},{className:"token comment"}),"// Variant configuration (including order) is not respected by the JIT engine"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js deleted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  variants"),d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),":"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"{"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js deleted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"    "),d.mdx("span",Object.assign({parentName:"span"},{className:"token comment"}),"// ..."),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js deleted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"    backgroundColor"),d.mdx("span",Object.assign({parentName:"span"},{className:"token operator"}),":"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"["),d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"'focus'"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),","),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token string"}),"'hover'"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"]"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js deleted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}),"  "),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"}"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-js unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"}"))))),d.mdx("p",null,"To handle these situations with the JIT engine, we recommend using stacked variants instead:"),d.mdx("pre",Object.assign({},{className:"language-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"<!-- This ensures the element is blue on hover, even if it's also focused -->"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token attr-value"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\""),"focus:bg-red-500 hover:bg-blue-500 ",d.mdx("span",Object.assign({parentName:"span"},{className:"code-highlight bg-code-highlight"}),"hover:focus:bg-blue-500"),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"\"")),d.mdx("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")))),d.mdx("p",null,"Stacked variants let you specify how something should be styled when multiple variants are active at the same time, so instead of trying to override ",d.mdx("inlineCode",{parentName:"p"},"focus")," styles with ",d.mdx("inlineCode",{parentName:"p"},"hover")," styles, you explicitly declare what an element should look like when both ",d.mdx("inlineCode",{parentName:"p"},"hover")," and ",d.mdx("inlineCode",{parentName:"p"},"focus")," are active simultaneously."),d.mdx(g.Heading,{level:3,id:"variants-are-inserted-at-tailwind-variants",nextElement:{type:"paragraph"}},"Variants are inserted at @tailwind variants"),d.mdx("p",null,"In the classic engine, all utility variants are injected as part of the ",d.mdx("inlineCode",{parentName:"p"},"@tailwind utilities")," directive."),d.mdx("p",null,"In the JIT engine, variants are injected at the ",d.mdx("inlineCode",{parentName:"p"},"@tailwind variants")," directive, which has been renamed from ",d.mdx("inlineCode",{parentName:"p"},"@tailwind screens"),"."),d.mdx("p",null,d.mdx("strong",{parentName:"p"},"This directive is optional")," ",d.mdx("em",{parentName:"p"},"(just like ",d.mdx("inlineCode",{parentName:"em"},"@tailwind screens")," always has been)")," and is only useful if you want explicit control over where utility variants are injected. By default, they are always injected at the very end of your stylesheet."),d.mdx("p",null,"If you were using ",d.mdx("inlineCode",{parentName:"p"},"@tailwind screens")," before, you should update your code to use ",d.mdx("inlineCode",{parentName:"p"},"@tailwind variants"),":"),d.mdx("pre",Object.assign({},{className:"language-diff-css"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-diff-css"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-css unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule rule"}),"@tailwind"),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule"})," base"),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule punctuation"}),";"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-css unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule rule"}),"@tailwind"),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule"})," components"),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule punctuation"}),";"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-css unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule rule"}),"@tailwind"),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule"})," utilities"),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule punctuation"}),";"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-css deleted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule rule"}),"@tailwind"),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule"})," screens"),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule punctuation"}),";"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-css inserted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule rule"}),"@tailwind"),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule"})," variants"),d.mdx("span",Object.assign({parentName:"span"},{className:"token atrule punctuation"}),";"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token plain language-css unchanged"}),"\n"),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-css unchanged"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})),d.mdx("span",Object.assign({parentName:"span"},{className:"token comment"}),"/* Some custom CSS... */")))),d.mdx("p",null,"The ",d.mdx("inlineCode",{parentName:"p"},"@tailwind variants")," feature is considered an advanced escape hatch and we recommend omitting it by default. You should only use it if your project won’t work properly without it, which is only ever really true if you are introducing Tailwind to a legacy system with a very fragile existing CSS codebase that has styles that absolutely ",d.mdx("em",{parentName:"p"},"need")," to be at the very end of the stylesheet for things to work."),d.mdx(g.Heading,{level:3,id:"transforms-and-filters-don-t-need-to-be-explicitly-enabled",nextElement:{type:"paragraph"}},"Transforms and filters don't need to be explicitly enabled"),d.mdx("p",null,"The ",d.mdx("inlineCode",{parentName:"p"},"transform"),", ",d.mdx("inlineCode",{parentName:"p"},"filter"),", and ",d.mdx("inlineCode",{parentName:"p"},"backdrop-filter")," classes aren’t necessary for “enabling” those features when using the JIT engine:"),d.mdx("pre",Object.assign({},{className:"language-diff-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-diff-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-html deleted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),"<"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value"}),"transform scale-50 filter grayscale backdrop-filter backdrop-blur-sm"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),">"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-html inserted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),"<"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value"}),"scale-50 grayscale backdrop-blur-sm"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),">")))),d.mdx("p",null,"This means you can no longer expect transforms and filters to be dormant by default, and conditionally activated by adding ",d.mdx("inlineCode",{parentName:"p"},"transform"),", ",d.mdx("inlineCode",{parentName:"p"},"filter"),", or ",d.mdx("inlineCode",{parentName:"p"},"backdrop-filter"),"."),d.mdx("p",null,"Instead, you will want put any variants on the sub-utilities themselves:"),d.mdx("pre",Object.assign({},{className:"language-diff-html"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-diff-html"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-html deleted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),"<"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value"}),"scale-105 -translate-y-1 hover:transform"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),">"),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"}))),d.mdx("span",Object.assign({parentName:"code"},{className:"token language-html inserted"}),d.mdx("span",Object.assign({parentName:"span"},{className:"token plain"})),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),"<"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"}),"div"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag"})," "),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-name"}),"class"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation attr-equals"}),"="),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value"}),"hover:scale-105 hover:-translate-y-1"),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag attr-value punctuation"}),"\""),d.mdx("span",Object.assign({parentName:"span"},{className:"token tag punctuation"}),">")))),d.mdx("hr",null),d.mdx(g.Heading,{level:2,id:"limitations",nextElement:{type:"paragraph"}},"Limitations"),d.mdx("p",null,"This new engine supports almost every feature that exists in the classic engine, plus tons of new features that wouldn’t be possible if everything had to be pre-generated up front."),d.mdx("p",null,"Due to the nature of how the engine works however, there are a few things that aren’t currently possible:"),d.mdx("ul",Object.assign({},{role:"list"}),d.mdx("li",{parentName:"ul"},d.mdx("strong",{parentName:"li"},"The ",d.mdx("inlineCode",{parentName:"strong"},"safelist")," option does not support regular expressions"),". Because no CSS is generated by default, the safelist has to be a list of complete class names. It’s not possible to safelist a regular expression, because there is not a pre-generated list of class names to match against that regular expression."),d.mdx("li",{parentName:"ul"},d.mdx("strong",{parentName:"li"},"The ",d.mdx("inlineCode",{parentName:"strong"},"prefix")," option cannot detect complete class names when configured as a function"),". Because we don’t generate class names in advance, we can only pass the utility “namespace” to custom prefix functions. See ",d.mdx("a",Object.assign({parentName:"li"},{href:"https://github.com/tailwindlabs/tailwindcss-jit/issues/159#issuecomment-808914202"}),"this comment")," for an example."),d.mdx("li",{parentName:"ul"},d.mdx("strong",{parentName:"li"},"You can only ",d.mdx("inlineCode",{parentName:"strong"},"@apply")," classes that are part of core, generated by plugins, or defined within a ",d.mdx("inlineCode",{parentName:"strong"},"@layer")," rule"),". You can’t currently ",d.mdx("inlineCode",{parentName:"li"},"@apply")," arbitrary CSS classes that aren’t defined within a ",d.mdx("inlineCode",{parentName:"li"},"@layer")," rule, although we may add support for this in the future.")),d.mdx("p",null,"We are also still ironing out some compatibility issues with certain build tools, which you can follow in our ",d.mdx("a",Object.assign({parentName:"p"},{href:"https://github.com/tailwindlabs/tailwindcss/issues"}),"issue tracker"),"."),d.mdx("p",null,"If you run into any other issues or find any bugs, please ",d.mdx("a",Object.assign({parentName:"p"},{href:"https://github.com/tailwindlabs/tailwindcss/issues/new/choose"}),"open an issue")," so we can fix it."),d.mdx("hr",null),d.mdx(g.Heading,{level:2,id:"troubleshooting",nextElement:{type:"heading",depth:3}},"Troubleshooting"),d.mdx(g.Heading,{level:3,id:"styles-aren-t-removed-when-classes-are-deleted",nextElement:{type:"paragraph"}},"Styles aren't removed when classes are deleted"),d.mdx("p",null,"When the JIT engine is running in watch mode, you might notice that when you add a class to your HTML then remove it, that the class is ",d.mdx("em",{parentName:"p"},"still")," present in your CSS."),d.mdx("p",null,"This isn’t a bug and is rather a deliberate performance optimization that drastically increases the speed of incremental rebuilds, especially in large projects."),d.mdx("p",null,"We recommend you always compile your CSS in a separate one-off build before deploying to production so that you can minify the output. For most modern tools (like Next.js for example), this sort of thing happens automatically because your compiled CSS is never committed to version control anyways."),d.mdx("p",null,"If you want Tailwind to rebuild the CSS completely from scratch while in watch mode, saving your ",d.mdx("inlineCode",{parentName:"p"},"tailwind.config.js")," file or your CSS input file will invalidate all of the caches and trigger a fresh rebuild."),d.mdx("a",{name:"watch-mode-and-one-off-builds",style:{"scroll-margin-top":"6.875rem"}}),d.mdx(g.Heading,{level:3,id:"styles-don-t-update-when-saving-content-files",nextElement:{type:"paragraph"}},"Styles don't update when saving content files"),d.mdx("p",null,"As of Tailwind CSS v2.2+, the JIT engine depends on PostCSS’s ",d.mdx("a",Object.assign({parentName:"p"},{href:"https://github.com/postcss/postcss/blob/main/docs/guidelines/runner.md#3-dependencies"}),"directory dependency messages")," to register your content files as CSS build dependencies with your build tool. These are a fairly new addition to PostCSS (added in May 2021), and not all build tools have been updated to support them yet."),d.mdx("p",null,"If your CSS isn’t rebuilding when you change your content files, try setting ",d.mdx("inlineCode",{parentName:"p"},"TAILWIND_MODE=watch")," as part of your watch script to tell Tailwind to use a legacy dependency tracking strategy instead, which works well with many build tools."),d.mdx("p",null,"For example, if you are using ",d.mdx("inlineCode",{parentName:"p"},"postcss-cli"),", set ",d.mdx("inlineCode",{parentName:"p"},"TAILWIND_MODE=watch")," in your dev/watch script:"),d.mdx("pre",Object.assign({},{className:"language-js"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-js"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"// package.json"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"// ..."),"\n  scripts",d.mdx("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Set TAILWIND_MODE=watch when starting your dev server"),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"dev\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"TAILWIND_MODE=watch postcss -i tailwind.css -o build.css --watch\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Do not set TAILWIND_MODE for one-off builds"),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"build\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"postcss -i tailwind.css -o build.css --minify\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"// ..."),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"// ..."),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),d.mdx("p",null,d.mdx("em",{parentName:"p"},"If you’re using Windows, we recommend ",d.mdx("a",Object.assign({parentName:"em"},{href:"https://www.npmjs.com/package/cross-env"}),"cross-env")," for setting environment variables in your scripts.")),d.mdx("p",null,"Note that setting ",d.mdx("inlineCode",{parentName:"p"},"TAILWIND_MODE=watch")," will start a long-running watch process in the background, so if you set that environment variable when trying to do a one-off build, it will look like the build is hanging."),d.mdx("p",null,"You should only set ",d.mdx("inlineCode",{parentName:"p"},"TAILWIND_MODE=watch")," when you are actually running a dev server/watch process, and only if your build tool doesn’t yet support PostCSS directory dependency messages. This flag is a temporary workaround for incompatible tooling, and will eventually be removed in a future version of Tailwind CSS."),d.mdx(g.Heading,{level:3,id:"styles-rebuild-in-an-infinite-loop",nextElement:{type:"paragraph"}},"Styles rebuild in an infinite loop"),d.mdx("p",null,"If your CSS seems to be rebuilding in an infinite loop, there’s a good chance it’s because your build tool doesn’t support PostCSS’s ",d.mdx("inlineCode",{parentName:"p"},"glob")," option when ",d.mdx("a",Object.assign({parentName:"p"},{href:"https://github.com/postcss/postcss/blob/main/docs/guidelines/runner.md#31-rebuild-when-dependencies-change"}),"registering dependencies"),"."),d.mdx("p",null,"Many build tools (such as webpack) don’t support this option, and as a result we can only tell them to watch specific files or ",d.mdx("em",{parentName:"p"},"entire directories"),". We can’t tell webpack to only watch ",d.mdx("inlineCode",{parentName:"p"},"*.html")," files in a directory for example."),d.mdx("p",null,"That means that if building your CSS causes ",d.mdx("em",{parentName:"p"},"any")," files in those directories to change, a rebuild will be triggered, even if the changed file doesn’t match the extension in your glob."),d.mdx(f.Editor,{filename:"tailwind.config.js"},d.mdx("pre",Object.assign({},{className:"language-js"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-js"}),"module",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),d.mdx("span",Object.assign({parentName:"code"},{className:"token property-access"}),"exports")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  purge",d.mdx("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Your CSS will rebuild any time *any* file in `src` changes"),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"'./src/**/*.{html,js}'"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"// ..."),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),d.mdx("p",null,"So if you are watching ",d.mdx("inlineCode",{parentName:"p"},"src/**/*.html")," for changes, but you are writing your CSS output file to ",d.mdx("inlineCode",{parentName:"p"},"src/css/styles.css"),", you will get an infinite rebuild loop in some tools."),d.mdx("p",null,"Ideally we could warn you about this in the console, but many tools support it perfectly fine (including our own CLI tool), and we have no reliable way to detect what build tool you are using."),d.mdx("p",null,"You have a few options for solving this problem:"),d.mdx("ol",Object.assign({},{role:"list"}),d.mdx("li",{parentName:"ol"},d.mdx("p",{parentName:"li"},d.mdx("strong",{parentName:"p"},"Use more specific paths in your ",d.mdx("inlineCode",{parentName:"strong"},"purge")," config"),". Make sure you only include directories that won’t change when your CSS builds."),d.mdx("pre",{parentName:"li"},d.mdx("code",Object.assign({parentName:"pre"},{className:"language-diff-js"}),"  // tailwind.config.js\n  module.exports = {\n    purge: [\n-     './src/**/*.{html,js}',\n+     './src/pages/**/*.{html,js}',\n+     './src/components/**/*.{html,js}',\n+     './src/layouts/**/*.{html,js}',\n+     './src/index.html',\n    ],\n    // ...\n  }\n")),d.mdx("p",{parentName:"li"},"If necessary, adjust your actual project directory structure to make sure you can target your template files without accidentally catching your CSS file or other build artifacts like manifest files.")),d.mdx("li",{parentName:"ol"},d.mdx("p",{parentName:"li"},d.mdx("strong",{parentName:"p"},"Use a build tool with PostCSS glob support"),". If you absolutely can’t change your purge config or directory structure, your best bet is to compile your CSS separately with a tool that has complete glob support. We recommend using ",d.mdx(e.default,{href:"/docs/installation#using-tailwind-cli",passHref:!0},d.mdx("a",null,"Tailwind CLI")),", which is a fast, simple, purpose-built tool for compiling your CSS with Tailwind."))),d.mdx(g.Heading,{level:3,id:"it-just-doesn-t-seem-to-work-properly",nextElement:{type:"paragraph"}},"It just doesn't seem to work properly"),d.mdx("p",null,"If you are experiencing weird, hard to describe issues with the output, or things just don’t seem like they are working at all, there’s a good chance it’s due to your build tool not supporting PostCSS dependency messages properly ",d.mdx("em",{parentName:"p"},"(or at all)"),". One known example of this currently is ",d.mdx("a",Object.assign({parentName:"p"},{href:"https://github.com/ionic-team/stencil-postcss/pull/35"}),"Stencil"),"."),d.mdx("p",null,"When you are having these sorts of issues, we recommend using the Tailwind CLI tool to compile your CSS separately instead of trying to integrate Tailwind into your existing tooling."),d.mdx("p",null,"You can use packages like ",d.mdx("inlineCode",{parentName:"p"},"npm-run-all")," or ",d.mdx("inlineCode",{parentName:"p"},"concurrently")," to compile your CSS alongside your usual development command by adding some scripts to your project like this:"),d.mdx("pre",Object.assign({},{className:"language-js"}),d.mdx("code",Object.assign({parentName:"pre"},{className:"language-js"}),d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"// package.json"),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token comment"}),"// ..."),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"scripts\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"dev\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"npm-run-all --parallel dev:*\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"dev:parcel\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"parcel serve ./src/index.html\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"dev:css\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"tailwindcss -o src/tailwind.css --watch\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"build\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"npm-run-all build:css build:parcel\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"build:parcel\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"parcel build ./src/index.html\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"build:css\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",d.mdx("span",Object.assign({parentName:"code"},{className:"token string"}),"\"tailwindcss -o src/tailwind.css --minify\""),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n  ",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n",d.mdx("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),d.mdx("p",null,"Either way, please be sure to ",d.mdx("a",Object.assign({parentName:"p"},{href:"https://github.com/tailwindlabs/tailwindcss/issues"}),"check for an existing issue")," or ",d.mdx("a",Object.assign({parentName:"p"},{href:"https://github.com/tailwindlabs/tailwindcss/issues/new/choose"}),"open a new one")," so we can figure out the problem and try to improve compatibility with whatever tool you are using."),d.mdx("p",null,"Tools with known compatibility issues currently include:"),d.mdx("ul",Object.assign({},{role:"list"}),d.mdx("li",{parentName:"ul"},"postcss-cli (",d.mdx("a",Object.assign({parentName:"li"},{href:"https://github.com/postcss/postcss-cli/pull/383"}),"#383"),")"),d.mdx("li",{parentName:"ul"},"Parcel (",d.mdx("a",Object.assign({parentName:"li"},{href:"https://github.com/parcel-bundler/parcel/pull/6299"}),"#6299"),")"),d.mdx("li",{parentName:"ul"},"Stencil (",d.mdx("a",Object.assign({parentName:"li"},{href:"https://github.com/ionic-team/stencil-postcss/pull/35"}),"#35"),")")))}n.isMDXComponent=!0,n.layoutProps=l},59533:function(a,b,c){"use strict";c.r(b),c.d(b,{Editor:function(){return f}});var d=c(85893),e=c(6774);function f(a){var b=a.filename,c=a.children;return(0,d.jsxs)("div",{className:"mt-5 mb-8 first:mt-0 last:mb-0 pt-2 bg-gray-800 rounded-xl shadow-lg overflow-hidden",children:[(0,d.jsx)(e.n,{primary:{name:b},showTabMarkers:!1}),(0,d.jsx)("div",{className:"children:my-0",children:c})]})}},6774:function(a,b,c){"use strict";c.d(b,{n:function(){return f}});var d=c(85893),e=c(86010);function f(a){var b=a.primary,c=a.secondary,f=a.showTabMarkers,g=a.side,h=a.children;return(0,d.jsxs)("div",{className:"flex text-gray-400 text-xs leading-6",children:[(0,d.jsxs)("div",{className:"flex-none text-sky-300 border-t border-b border-t-transparent border-b-sky-300 px-4 py-1 flex items-center",children:[b.name,(void 0===f||f)&&(b.saved?(0,d.jsx)("svg",{viewBox:"0 0 4 4",className:"ml-2.5 flex-none w-1 h-1 text-gray-500 overflow-visible",children:(0,d.jsx)("path",{d:"M-1 -1L5 5M5 -1L-1 5",fill:"none",stroke:"currentColor",strokeLinecap:"round"})}):(0,d.jsx)("div",{className:"ml-2.5 flex-none w-1 h-1 rounded-full bg-current"}))]}),(0,d.jsxs)("div",{className:(0,e.Z)("flex-auto flex items-center bg-gray-700/50 border border-gray-500/30","left"===g?"rounded-tl lg:rounded-tr":"rounded-tl"),children:[(void 0===c?[]:c).map(function(a){var b=a.name,c=a.open,f=a.className;return(0,d.jsx)("div",{className:(0,e.Z)("px-4 py-1 border-r border-gray-200/5",f,{italic:!(void 0===c||c)}),children:b},b)}),h&&(0,d.jsx)("div",{className:"flex-auto flex items-center justify-end px-4 space-x-4",children:h})]})]})}},17204:function(a,b,c){"use strict";c.r(b),c.d(b,{ThemeReference:function(){return h}});var d=c(85893),e=c(17022);function f(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}var g=function(a){for(var b=1;b<arguments.length;b++){var c=null!=arguments[b]?arguments[b]:{},d=Object.keys(c);"function"==typeof Object.getOwnPropertySymbols&&(d=d.concat(Object.getOwnPropertySymbols(c).filter(function(a){return Object.getOwnPropertyDescriptor(c,a).enumerable}))),d.forEach(function(b){f(a,b,c[b])})}return a}({screens:"Your project's responsive breakpoints",colors:"Your project's color palette",spacing:"Your project's spacing scale",container:"Configuration for the `container` plugin",inset:"Values for the `top`, `right`, `bottom`, and `left` properties",keyframes:"Keyframe values used in the `animation` plugin"},Object.fromEntries(["placeholderColor","placeholderOpacity","rotate","scale","space","textOpacity","translate","backdropBlur","backdropBrightness","backdropContrast","backdropGrayscale","backdropHueRotate","backdropInvert","backdropOpacity","backdropSaturate","backdropSepia","blur","brightness","borderOpacity","borderWidth","boxShadowColor","contrast","divideColor","divideOpacity","divideWidth","dropShadow","fill","grayscale","hueRotate","invert","gradientColorStops","ringColor","ringOffsetColor","ringOffsetWidth","ringOpacity","ringWidth","rotate","saturate","scale","sepia","skew",].map(function(a){return[a,"Values for the `".concat(a,"` plugin")]})));function h(){return(0,d.jsx)("div",{className:"prose",children:(0,d.jsxs)("table",{children:[(0,d.jsx)("thead",{children:(0,d.jsxs)("tr",{children:[(0,d.jsx)("th",{children:"Key"}),(0,d.jsx)("th",{children:"Description"})]})}),(0,d.jsx)("tbody",{children:Object.keys(e.Z.theme).map(function(a){var b;return(0,d.jsxs)("tr",{children:[(0,d.jsx)("td",{children:(0,d.jsx)("code",{children:a})}),(0,d.jsx)("td",{children:(null===(b=g[a])|| void 0===b?void 0:b.split(/`([^`]+)`/).map(function(a,b){return b%2==0?a:(0,d.jsx)("code",{children:a},b)}))||(0,d.jsxs)(d.Fragment,{children:["Values for the"," ",(0,d.jsx)("code",{children:a.replace(/([a-z])([A-Z])/g,function(a,b,c){return"".concat(b,"-").concat(c.toLowerCase())})})," ","property"]})})]},a)})})]})})}},55390:function(a,b,c){"use strict";c.r(b),c.d(b,{TipGood:function(){return e},TipBad:function(){return f},TipCompat:function(){return g},TipInfo:function(){return h}});var d=c(85893);function e(a){var b=a.children;return(0,d.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,d.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-cyan-500 text-white flex items-center justify-center ring-2 ring-cyan-500",children:[(0,d.jsx)("svg",{width:"6",height:"4.5",className:"overflow-visible","aria-hidden":"true",children:(0,d.jsx)("path",{d:"M6 0L2 4.5L0 2.5",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,d.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-cyan-500/30 rounded-full"})]}),(0,d.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-gray-900",children:b})]})}function f(a){var b=a.children;return(0,d.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,d.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-rose-400 text-white flex items-center justify-center ring-2 ring-rose-400",children:[(0,d.jsx)("svg",{width:"6",height:"6",className:"overflow-visible","aria-hidden":"true",children:(0,d.jsx)("path",{d:"M0 0L6 6M6 0L0 6",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,d.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-rose-200 rounded-full"})]}),(0,d.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-gray-900",children:b})]})}function g(a){var b=a.children;return(0,d.jsx)("div",{className:"text-sm bg-light-blue-100 text-light-blue-800 font-medium px-4 py-3 mb-4 rounded-xl",children:(0,d.jsxs)("div",{className:"flex items-start space-x-3",children:[(0,d.jsx)("svg",{width:"20",height:"20",className:"text-light-blue-500",fill:"currentColor",children:(0,d.jsx)("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M6.998 2a1 1 0 00-.707 1.707l.707.707v3.758a1 1 0 01-.293.707l-4 4C.815 14.769 2.154 18 4.826 18H15.17c2.672 0 4.01-3.231 2.12-5.121l-4-4a1 1 0 01-.292-.707V4.414l.707-.707A1 1 0 0012.998 2h-6zm2 6.172V4h2v4.172a3 3 0 00.879 2.12l1.027 1.028a4 4 0 00-2.171.102l-.47.156a4 4 0 01-2.53 0l-.563-.187a1.992 1.992 0 00-.114-.035l1.063-1.063a3 3 0 00.879-2.121z"})}),(0,d.jsx)("p",{className:"flex-1",children:b})]})})}function h(a){var b=a.children;return(0,d.jsxs)("div",{className:"not-prose mt-6 -mb-1 flex space-x-2",children:[(0,d.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",className:"flex-none w-5 h-5 text-gray-400",viewBox:"0 0 20 20",fill:"currentColor",children:(0,d.jsx)("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z",clipRule:"evenodd"})}),(0,d.jsx)("p",{className:"text-gray-700 text-sm font-medium",children:b})]})}},53339:function(a,b,c){"use strict";c.r(b),c.d(b,{DocumentationLayout:function(){return l}});var d=c(85893),e=c(21744),f=c(9008),g=c(11163),h=c(21370),i=c(68224),j=c(54713);function k(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}function l(a){var b=(0,g.useRouter)();return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(i.D,{suffix:"/"===b.pathname?void 0:"Tailwind CSS",children:a.layoutProps.meta.metaTitle||a.layoutProps.meta.title}),(0,d.jsxs)(f.default,{children:[(0,d.jsx)("meta",{name:"twitter:card",content:"summary"},"twitter:card"),(0,d.jsx)("meta",{name:"twitter:image",content:"https://tailwindcss.com".concat(h.Z)},"twitter:image")]}),(0,d.jsx)(e.C,function(a){for(var b=1;b<arguments.length;b++){var c=null!=arguments[b]?arguments[b]:{},d=Object.keys(c);"function"==typeof Object.getOwnPropertySymbols&&(d=d.concat(Object.getOwnPropertySymbols(c).filter(function(a){return Object.getOwnPropertyDescriptor(c,a).enumerable}))),d.forEach(function(b){k(a,b,c[b])})}return a}({nav:j.u},a))]})}l.nav=j.u}},function(a){a.O(0,[9774,6401,7022,6852,1350,4713,2888,179],function(){return a(a.s=64713)}),_N_E=a.O()}])